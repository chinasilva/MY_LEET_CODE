#
# @lc app=leetcode.cn id=8 lang=python3
#
# [8] 字符串转换整数 (atoi)
#
# https://leetcode-cn.com/problems/string-to-integer-atoi/description/
#
# algorithms
# Medium (16.89%)
# Total Accepted:    41.1K
# Total Submissions: 243.4K
# Testcase Example:  '"42"'
#
# 请你来实现一个 atoi 函数，使其能将字符串转换成整数。
#
# 首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。
#
#
# 当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。
#
# 该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。
#
# 注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。
#
# 在任何情况下，若函数不能进行有效的转换时，请返回 0。
#
# 说明：
#
# 假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−2^31,  2^31 − 1]。如果数值超过这个范围，qing返回
# INT_MAX (2^31 − 1) 或 INT_MIN (−2^31) 。
#
# 示例 1:
#
# 输入: "42"
# 输出: 42
#
#
# 示例 2:
#
# 输入: "   -42"
# 输出: -42
# 解释: 第一个非空白字符为 '-', 它是一个负号。
# 我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
#
#
# 示例 3:
#
# 输入: "4193 with words"
# 输出: 4193
# 解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
#
#
# 示例 4:
#
# 输入: "words and 987"
# 输出: 0
# 解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
# ⁠    因此无法执行有效的转换。
#
# 示例 5:
#
# 输入: "-91283472332"
# 输出: -2147483648
# 解释: 数字 "-91283472332" 超过 32 位有符号整数范围。
# 因此返回 INT_MIN (−2^31) 。
#
#
#

class Solution:
    def myAtoi(self, str: str) -> int:
        return self.print_num(str)

    def print_num(self,newStr):
        newStr=newStr.strip() # 去除空格
        tmp=''
        if len(newStr)>0:
            if newStr[0]=='-':
                tmp='-'
                newStr=newStr[1:] # 使用切片，去掉首位是负号的字符串
            elif newStr[0]=='+':
                newStr=newStr[1:] # 使用切片，去掉首位是正号的字符串
        for i in newStr: # 保留数字，过滤字符，首位是字符全部过滤
            if str.isdigit(i):
                tmp+=i
            else:
                break
        if len(tmp)>0 and tmp!='-': # str为数字
            if int(tmp)<(-2**31) :
                return -2**31
            elif int(tmp)>=(2**31):
                return 2**31-1
            else:
                return int(tmp)
        else:     
            return 0

# if __name__ == "__main__":
#    s = Solution()
#    a="   -+42"
# #    a="21312dfsda"   
# #    b="123"
# #    b="4193 with words"
#    b="2147483648"
#    print(s.print_num(a))
#    print(s.print_num(b))
#    print(2**31)
# #    print(-2**31)
# #    print(int(a))
#     # s.threeSum([7,-1,14,-12,-8,7,2,-15,8,8,-8,-14,-4,-5,7,9,11,-4,-15,-6,1,-14,4,3,10,-5,2,1,6,11,2,-2,-5,-7,-6,2,-15,11,-6,8,-4,2,1,-1,4,-6,-15,1,5,-15,10,14,9,-8,-6,4,-6,11,12,-15,7,-1,-9,9,-1,0,-4,-1,-12,-2,14,-9,7,0,-3,-4,1,-2,12,14,-10,0,5,14,-1,14,3,8,10,-8,8,-5,-2,6,-11,12,13,-7,-12,8,6,-13,14,-2,-5,-11,1,3,-6])
